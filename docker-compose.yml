# AI Trading Dashboard Docker Compose Configuration
version: '3.8'

services:
  # Main Trading Dashboard Application
  trading-dashboard:
    build:
      context: .
      target: production
    container_name: ai-trading-dashboard
    restart: unless-stopped
    ports:
      - "8000:8000"  # Backend API
      - "6006:6006"  # TensorBoard
    volumes:
      # Persistent data volumes
      - ./logs:/app/logs
      - ./models:/app/models
      - ./checkpoints:/app/checkpoints
      - ./data:/app/data
      # Configuration files
      - ./.env:/app/.env:ro
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - TENSORBOARD_PORT=6006
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - redis
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.trading-dashboard.rule=Host(`localhost`)"
      - "traefik.http.services.trading-dashboard.loadbalancer.server.port=8000"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - trading-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-trading123}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-trading_db}
      POSTGRES_USER: ${POSTGRES_USER:-trading_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trading_pass}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-trading_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - trading-network
    depends_on:
      - trading-dashboard
    profiles:
      - production

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - trading-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - trading-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Development environment with hot reload
  trading-dev:
    build:
      context: .
      target: development
    container_name: ai-trading-dev
    restart: unless-stopped
    ports:
      - "8000:8000"  # Backend API
      - "3000:3000"  # Frontend dev server
      - "6006:6006"  # TensorBoard
    volumes:
      # Source code volumes for hot reload
      - .:/app
      - /app/node_modules
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=DEBUG
      - DEV_MODE=true
    networks:
      - trading-network
    depends_on:
      - redis
      - postgres
    profiles:
      - development

# Networks
networks:
  trading-network:
    driver: bridge

# Volumes
volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

# ==========================================
# Additional Compose Files for Different Environments
# ==========================================

# To run development environment:
# docker-compose --profile development up

# To run with monitoring:
# docker-compose --profile monitoring up

# To run production with proxy:
# docker-compose --profile production up

# To run everything:
# docker-compose --profile development --profile monitoring --profile production up